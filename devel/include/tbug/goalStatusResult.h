// Generated by gencpp from file tbug/goalStatusResult.msg
// DO NOT EDIT!


#ifndef TBUG_MESSAGE_GOALSTATUSRESULT_H
#define TBUG_MESSAGE_GOALSTATUSRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tbug
{
template <class ContainerAllocator>
struct goalStatusResult_
{
  typedef goalStatusResult_<ContainerAllocator> Type;

  goalStatusResult_()
    : robot0_thereOrNot(0)
    , robot1_thereOrNot(0)
    , robot2_thereOrNot(0)  {
    }
  goalStatusResult_(const ContainerAllocator& _alloc)
    : robot0_thereOrNot(0)
    , robot1_thereOrNot(0)
    , robot2_thereOrNot(0)  {
  (void)_alloc;
    }



   typedef uint32_t _robot0_thereOrNot_type;
  _robot0_thereOrNot_type robot0_thereOrNot;

   typedef uint32_t _robot1_thereOrNot_type;
  _robot1_thereOrNot_type robot1_thereOrNot;

   typedef uint32_t _robot2_thereOrNot_type;
  _robot2_thereOrNot_type robot2_thereOrNot;





  typedef boost::shared_ptr< ::tbug::goalStatusResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tbug::goalStatusResult_<ContainerAllocator> const> ConstPtr;

}; // struct goalStatusResult_

typedef ::tbug::goalStatusResult_<std::allocator<void> > goalStatusResult;

typedef boost::shared_ptr< ::tbug::goalStatusResult > goalStatusResultPtr;
typedef boost::shared_ptr< ::tbug::goalStatusResult const> goalStatusResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tbug::goalStatusResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tbug::goalStatusResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tbug::goalStatusResult_<ContainerAllocator1> & lhs, const ::tbug::goalStatusResult_<ContainerAllocator2> & rhs)
{
  return lhs.robot0_thereOrNot == rhs.robot0_thereOrNot &&
    lhs.robot1_thereOrNot == rhs.robot1_thereOrNot &&
    lhs.robot2_thereOrNot == rhs.robot2_thereOrNot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tbug::goalStatusResult_<ContainerAllocator1> & lhs, const ::tbug::goalStatusResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tbug

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tbug::goalStatusResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tbug::goalStatusResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tbug::goalStatusResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tbug::goalStatusResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tbug::goalStatusResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tbug::goalStatusResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tbug::goalStatusResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ce792ce8df4eddb005f1e3ae8982006";
  }

  static const char* value(const ::tbug::goalStatusResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ce792ce8df4eddbULL;
  static const uint64_t static_value2 = 0x005f1e3ae8982006ULL;
};

template<class ContainerAllocator>
struct DataType< ::tbug::goalStatusResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tbug/goalStatusResult";
  }

  static const char* value(const ::tbug::goalStatusResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tbug::goalStatusResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"uint32 robot0_thereOrNot\n"
"uint32 robot1_thereOrNot\n"
"uint32 robot2_thereOrNot\n"
;
  }

  static const char* value(const ::tbug::goalStatusResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tbug::goalStatusResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot0_thereOrNot);
      stream.next(m.robot1_thereOrNot);
      stream.next(m.robot2_thereOrNot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goalStatusResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tbug::goalStatusResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tbug::goalStatusResult_<ContainerAllocator>& v)
  {
    s << indent << "robot0_thereOrNot: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot0_thereOrNot);
    s << indent << "robot1_thereOrNot: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot1_thereOrNot);
    s << indent << "robot2_thereOrNot: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot2_thereOrNot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TBUG_MESSAGE_GOALSTATUSRESULT_H
